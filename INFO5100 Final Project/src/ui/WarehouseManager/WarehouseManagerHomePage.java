/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.WarehouseManager;

import Business.ConfigureASystem;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.LogisticsGroupEnterprise;
import Business.Logistics.Shipment;
import Business.Logistics.TrackingInfo;
import Business.Network.Network;
import Business.Order.Order;
import Business.Order.OrderDirectory;
import Business.Organization.LogisticsOrganization;
import Business.Organization.Organization;
import Business.Product.Product;
import Business.UserAccount.UserAccount;
import Business.Warehouse.Stock;
import Business.Warehouse.Warehouse;
import Business.WorkQueue.WarehouseWorkRequest;
import java.awt.CardLayout;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import java.lang.Integer;
import java.util.Calendar;
import java.util.Date;

/**
 *
 * @author yushe
 */
public class WarehouseManagerHomePage extends javax.swing.JPanel {

    JPanel workArea;
    Warehouse wh;
    private OrderDirectory orderDirectory;
    private javax.swing.JTextField txtProductNameView3;
    private javax.swing.JTextField txtIdView3;
    private javax.swing.JTextField txtPriceView3;
    private Enterprise enterprise;
    private UserAccount userAccount;

    /**
     * Creates new form WarehouseManagerHomePage
     */
    public WarehouseManagerHomePage() {
        initComponents();
        orderDirectory = new OrderDirectory();
    }

    public WarehouseManagerHomePage(JPanel userProcessContainer, Warehouse warehouse, Enterprise enterprise, UserAccount account) {
        initComponents();
        this.workArea = userProcessContainer;
        this.wh = warehouse;
        this.enterprise = enterprise;
        this.userAccount = account;
        orderDirectory = new OrderDirectory();

        // Initialize the table
        populateTable();
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);

        if (wh != null) {
            for (Stock stock : wh.getStock()) {
                Object[] row = new Object[6];
                row[0] = stock.getProduct().getProductName();
                row[1] = stock.getProduct().getProductId();
                row[2] = stock.getProduct().getPrice();
                row[3] = stock.getAmount();
                row[4] = stock.getAmount() > 0 ? "In Stock" : "Out of Stock";
                row[5] = stock.getLastUpdated();
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        btnShipQuantity = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        lblProductId1 = new javax.swing.JLabel();
        txtSearchProductID = new javax.swing.JTextField();
        btnSearch1 = new javax.swing.JButton();
        ViewProductDetails = new javax.swing.JPanel();
        lblTitle1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblProductCatalog = new javax.swing.JTable();
        lblTitle2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblshipCart = new javax.swing.JTable();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnShip = new javax.swing.JButton();
        txtshipQuantity = new javax.swing.JTextField();

        jPanel1.setPreferredSize(new java.awt.Dimension(1450, 800));

        lblTitle.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitle.setText("TechGadgets Inc. Product Catalog:");

        btnBack.setText("<< Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnShipQuantity.setText("Ship Quantity");
        btnShipQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShipQuantityActionPerformed(evt);
            }
        });

        btnRefresh.setText("Refresh List");
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });

        lblProductId1.setText("Product Id:");

        btnSearch1.setText("Search");
        btnSearch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearch1ActionPerformed(evt);
            }
        });

        ViewProductDetails.setLayout(new java.awt.CardLayout());

        lblTitle1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitle1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle1.setText("TechGadgets Inc. Warehouse Management System");

        tblProductCatalog.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        tblProductCatalog.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product Name", "Product ID", "Price", "Quantity", "Stock Status", "Last Updated"
            }
        ));
        jScrollPane1.setViewportView(tblProductCatalog);

        lblTitle2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        lblTitle2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle2.setText("Ship Items List");

        tblshipCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Product Name", "Purchase Cost", "Ship Quantity", "Total Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblshipCart);
        if (tblshipCart.getColumnModel().getColumnCount() > 0) {
            tblshipCart.getColumnModel().getColumn(3).setHeaderValue("Total Amount");
        }

        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        btnShip.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        btnShip.setText("Ship");
        btnShip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShipActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTitle1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(37, 37, 37))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ViewProductDetails, javax.swing.GroupLayout.PREFERRED_SIZE, 564, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(200, 200, 200))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblTitle2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnShipQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtshipQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(lblTitle)
                                        .addGap(12, 12, 12)
                                        .addComponent(btnRefresh)
                                        .addGap(78, 78, 78)
                                        .addComponent(lblProductId1)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtSearchProductID, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(12, 12, 12)
                                        .addComponent(btnSearch1)))
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap(23, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnRemoveOrderItem, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 1421, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnShip, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTitle1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBack)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTitle)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(btnRefresh))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addComponent(lblProductId1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtSearchProductID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(btnSearch1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnShipQuantity)
                    .addComponent(txtshipQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(51, 51, 51)
                .addComponent(ViewProductDetails, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTitle2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemoveOrderItem)
                .addGap(29, 29, 29)
                .addComponent(btnShip, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(141, 141, 141))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        workArea.remove(this);
        CardLayout layout = (CardLayout) workArea.getLayout();
        layout.previous(workArea);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnShipQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShipQuantityActionPerformed

        int selectedRow = tblProductCatalog.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a product first");
            return;
        }

        // 获取选中的产品信息
        String productId = tblProductCatalog.getValueAt(selectedRow, 1).toString();
        Product product = Warehouse.getInstance().findProductById(productId);

        // 弹出发货对话框
        String quantityStr = JOptionPane.showInputDialog(this,
                "Enter shipping quantity for " + product.getProductName());
        if (quantityStr == null || quantityStr.trim().isEmpty()) {
            return;
        }

        String destination = JOptionPane.showInputDialog(this,
                "Enter destination address");
        if (destination == null || destination.trim().isEmpty()) {
            return;
        }

        try {
            int quantity = Integer.parseInt(quantityStr);
            initiateShipment(product, quantity, destination);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this,
                    "Invalid quantity format",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnShipQuantityActionPerformed

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        refreshTable();
    }//GEN-LAST:event_btnRefreshActionPerformed

    private void btnSearch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearch1ActionPerformed
        try {
            String productId = txtSearchProductID.getText();
            Product p = null;
            for (Stock s : wh.getStock()) {
                if (s.getProduct().getId().equals(productId)) {
                    p = s.getProduct();
                    break;
                }
            }
            if (p != null) {
                txtProductNameView3.setText(p.getProductName());
                txtIdView3.setText(p.getProductId());
                txtPriceView3.setText(String.valueOf(p.getPrice()));
                CardLayout layout = (CardLayout) ViewProductDetails.getLayout();
                layout.show(ViewProductDetails, "card2");
            } else {
                JOptionPane.showMessageDialog(null, "Nothing found", "No result found matching your criteria!!", JOptionPane.WARNING_MESSAGE);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Nothing found", "No result found matching your criteria!!", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSearch1ActionPerformed

    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
        int selectedRow = tblshipCart.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select an item to remove");
            return;
        }

        orderDirectory.getOrderList().remove(selectedRow);
        updateCartTable();
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnShipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShipActionPerformed
        if (orderDirectory.getOrderList().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Cart is empty!");
            return;
        }

        // 处理订单及发货流程
        for (Order order : orderDirectory.getOrderList()) {
            order.setStatus("Completed");
            // 添加订单处理时间
            order.setProcessDate(new java.util.Date());

            // 通知仓库减少库存
            notifyWarehouse(order);

            // 创建并发送物流工作请求
            sendLogisticsWorkRequest(order);
        }

        // 清空购物车
        orderDirectory = new OrderDirectory();
        updateCartTable();

        // 刷新请求列表
        refreshRequestTable();

        JOptionPane.showMessageDialog(this, "Orders have been processed successfully!");
    }//GEN-LAST:event_btnShipActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel ViewProductDetails;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.JButton btnSearch1;
    private javax.swing.JButton btnShip;
    private javax.swing.JButton btnShipQuantity;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblProductId1;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JLabel lblTitle1;
    private javax.swing.JLabel lblTitle2;
    private javax.swing.JTable tblProductCatalog;
    private javax.swing.JTable tblshipCart;
    private javax.swing.JTextField txtSearchProductID;
    private javax.swing.JTextField txtshipQuantity;
    // End of variables declaration//GEN-END:variables

    // operations
    public void refreshTable() {
        DefaultTableModel model = (DefaultTableModel) tblProductCatalog.getModel();
        model.setRowCount(0);

        for (Stock s : wh.getStock()) {
            Object[] row = new Object[6];
            row[0] = s;
            row[1] = s.getProduct().getId();
            row[2] = s.getProduct().getPrice();
            row[3] = s.getAmount();
            row[4] = s.getStockStatus();
            row[5] = s.getProduct().getLastUpdated();

        }
    }

    //发货功能
    public void initiateShipment(Product product, int quantity, String destination) {
        // 1. 检查库存
        Warehouse warehouse = Warehouse.getInstance();
        if (warehouse.getProductAmount(product.getProductId()) < quantity) {
            JOptionPane.showMessageDialog(this,
                    "Insufficient stock for product: " + product.getProductName(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        // 2. 生成订单ID
        String orderId = "ORD" + System.currentTimeMillis();

        // 3. 获取物流组织实例
        LogisticsOrganization logisticsOrg = ConfigureASystem.getLogisticsOrganization();
        if (logisticsOrg == null) {
            JOptionPane.showMessageDialog(this,
                    "Cannot connect to logistics system",
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            // 4. 创建物流订单
            Shipment shipment = logisticsOrg.getShipmentDirectory()
                    .createShipmentFromWarehouse(orderId, product, quantity);

            // 5. 设置发货信息
            shipment.setDestination(destination);
            shipment.setShipDate(new Date());
            shipment.setOrigin("Warehouse");
            shipment.setShipmentStatus(Shipment.STATUS_PROCESSING);

            // 6. 减少库存
            warehouse.decreaseStock(product.getProductId(), quantity);

            // 7. 添加跟踪记录
            TrackingInfo tracking = new TrackingInfo();
            tracking.setShipmentId(shipment.getShipmentId());
            tracking.setTimestamp(new Date());
            tracking.setLocation("Warehouse");
            tracking.setDescription("Order processed and inventory deducted");
            tracking.setStatus("Completed");
            shipment.addTrackingInfo(tracking);

            JOptionPane.showMessageDialog(this,
                    "Shipment created successfully\nTracking Number: " + shipment.getTrackingNumber(),
                    "Success",
                    JOptionPane.INFORMATION_MESSAGE);

            // 8. 刷新库存显示
            refreshTable();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "Error creating shipment: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateCartTable() {
        DefaultTableModel model = (DefaultTableModel) tblshipCart.getModel();
        model.setRowCount(0);

        for (Order order : orderDirectory.getOrderList()) {
            Object[] row = new Object[4];
            row[0] = order.getProductName();
            row[1] = order.getPurchaseCost();
            row[2] = order.getQuantity();
            row[3] = order.getTotalAmount();
            model.addRow(row);
        }
    }

    private void refreshRequestTable() {
        // 刷新请求表格，实际项目中需要实现具体逻辑
        System.out.println("Refreshing request table...");
    }

    private void notifyWarehouse(Order order) {
        // 处理订单并更新库存
        String requestId = order.getRequestId();
        String productName = order.getProductName();
        int actualAmount = order.getQuantity();

        // 调用仓库处理请求的方法
        if (wh != null) {
            // 在库存中查找匹配名称的产品
            Product product = null;
            for (Stock stock : wh.getStock()) {
                if (stock.getProduct().getProductName().equals(productName)) {
                    product = stock.getProduct();
                    break;
                }
            }

            if (product != null) {
                wh.decreaseStock(product.getProductId(), actualAmount);
                System.out.println("Processed order: " + requestId
                        + " for product: " + productName
                        + " with amount: " + actualAmount);
            }
        }
    }

    /**
     * 创建并发送物流工作请求
     *
     * @param order 订单信息
     */
    private void sendLogisticsWorkRequest(Order order) {
        try {
            // 1. 生成唯一的运输单号和订单ID
            String trackingNumber = "TRK" + System.currentTimeMillis();
            String shipmentId = "SHP" + System.currentTimeMillis();

            // 2. 获取订单信息
            String productName = order.getProductName();
            int quantity = order.getQuantity();

            // 3. 获取目的地
            String destination = getDestinationFromOrder(order);
            if (destination == null || destination.isEmpty()) {
                String[] destinations = {"Boston", "Los Angeles", "New York", "Cancun", "Guanajuato"};
                destination = (String) JOptionPane.showInputDialog(
                        this,
                        "Select destination for order " + order.getOrderId() + ":",
                        "Select Destination",
                        JOptionPane.QUESTION_MESSAGE,
                        null,
                        destinations,
                        destinations[0]);

                if (destination == null) {
                    throw new Exception("Destination is required");
                }
            }

            // 4. 获取运输方式
            String[] methods = {"Air Freight", "Sea Freight", "Ground", "Express"};
            String shippingMethod = (String) JOptionPane.showInputDialog(
                    this,
                    "Select shipping method for order " + order.getOrderId() + ":",
                    "Select Shipping Method",
                    JOptionPane.QUESTION_MESSAGE,
                    null,
                    methods,
                    methods[0]);

            if (shippingMethod == null) {
                shippingMethod = "Ground"; // 默认选择陆运
            }

            // 5. 创建WarehouseWorkRequest
            WarehouseWorkRequest request = new WarehouseWorkRequest();
            request.setShipmentId(shipmentId);
            request.setTrackingNumber(trackingNumber);
            request.setProductName(productName);
            request.setQuantity(quantity);
            request.setDestination(destination);
            request.setShippingMethod(shippingMethod);
            request.setRequestDate(new Date());

            // 6. 计算预计送达日期
            Date estimatedDeliveryDate = calculateEstimatedDeliveryDate(destination, shippingMethod);
            request.setEstimatedDeliveryDate(estimatedDeliveryDate);

            // 7. 设置请求状态和消息
            request.setStatus("Pending");
            request.setMessage("Warehouse shipping request - Product: " + productName + ", Quantity: " + quantity);

            // 8. 设置发送者(仓库管理员)
            if (userAccount == null) {
                throw new Exception("User account not available");
            }
            request.setSender(userAccount);
            System.out.println("Set sender for warehouse request: " + userAccount.getUsername());

            // 9. 查找物流组织并发送请求
            LogisticsOrganization logisticsOrg = findLogisticsOrganization();
            if (logisticsOrg == null) {
                throw new Exception("Logistics organization not found");
            }

            // 10. 将请求添加到物流组织的工作队列
            logisticsOrg.getWorkQueue().getWorkRequestList().add(request);

            // 11. 创建Shipment对象
            Shipment shipment = createShipment(request);

            // 12. 添加到物流组织
            logisticsOrg.getShipmentDirectory().addShipment(shipment);

            System.out.println("Successfully sent shipping request: " + trackingNumber);

        } catch (Exception e) {
            System.err.println("Error in sendLogisticsWorkRequest: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    "Error processing shipping request: " + e.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private String getDestinationFromOrder(Order order) {
        // 实际项目中，这里应该从Order对象中获取目的地信息
        // 如果Order类中没有目的地字段，可以返回null或空字符串
        return null;
    }

    /**
     * 计算预计送达日期
     */
    private Date calculateEstimatedDeliveryDate(String destination, String shippingMethod) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(new Date()); // 从今天开始计算

        int daysToAdd = 5; // 默认时间

        // 根据运输方式调整时间
        if ("Air Freight".equals(shippingMethod) || "航空运输".equals(shippingMethod)) {
            daysToAdd = 3; // 空运最快
        } else if ("Sea Freight".equals(shippingMethod) || "海运".equals(shippingMethod)) {
            daysToAdd = 30; // 海运最慢
        } else if ("Express".equals(shippingMethod) || "快递".equals(shippingMethod)) {
            daysToAdd = 2; // 特快
        } else if ("Ground".equals(shippingMethod) || "陆运".equals(shippingMethod)) {
            daysToAdd = 10; // 陆运
        }

        // 根据目的地调整时间
        if (destination.contains("Boston") || destination.contains("波士顿")
                || destination.contains("New York") || destination.contains("纽约")) {
            daysToAdd += 10; // 美国东海岸
        } else if (destination.contains("LA") || destination.contains("Los Angeles")
                || destination.contains("洛杉矶")) {
            daysToAdd += 12; // 美国西海岸
        } else if (destination.contains("Cancun") || destination.contains("坎昆")
                || destination.contains("Guanajuato")) {
            daysToAdd += 15; // 墨西哥
        } else if (destination.contains("上海") || destination.contains("Beijing")
                || destination.contains("北京") || destination.contains("广州")
                || destination.contains("深圳") || destination.contains("杭州")) {
            daysToAdd = 1; // 国内城市
        }

        cal.add(Calendar.DAY_OF_MONTH, daysToAdd);
        return cal.getTime();
    }

// 辅助方法：查找物流组织
    private LogisticsOrganization findLogisticsOrganization() {
        try {
            // 1. 首先尝试使用全局实例
            if (ConfigureASystem.logisticsOrg != null) {
                System.out.println("Using global LogisticsOrganization instance");
                return ConfigureASystem.logisticsOrg;
            }

            // 2. 如果全局实例不可用，从系统中查找
            EcoSystem system = EcoSystem.getInstance();
            if (system == null) {
                throw new Exception("System instance is null");
            }

            if (system.getNetworkList() == null) {
                throw new Exception("Network list is null");
            }

            for (Network network : system.getNetworkList()) {
                if (network.getEnterpriseDirectory() == null) {
                    continue;
                }

                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                    if (enterprise instanceof LogisticsGroupEnterprise) {
                        System.out.println("Found LogisticsGroupEnterprise: " + enterprise.getName());

                        if (enterprise.getOrganizationDirectory() == null) {
                            continue;
                        }

                        for (Organization org : enterprise.getOrganizationDirectory().getOrganizationList()) {
                            if (org instanceof LogisticsOrganization) {
                                System.out.println("Found LogisticsOrganization in enterprise");
                                return (LogisticsOrganization) org;
                            }
                        }

                        // 如果找到企业但没有物流组织，创建一个
                        System.out.println("Creating new LogisticsOrganization in existing enterprise");
                        LogisticsOrganization newOrg = (LogisticsOrganization) enterprise.getOrganizationDirectory()
                                .createOrganization(Organization.Type.Logistics);
                        return newOrg;
                    }
                }
            }

            System.out.println("No LogisticsGroupEnterprise found in the system");
            return null;

        } catch (Exception e) {
            System.err.println("Error in findLogisticsOrganization: " + e.getMessage());
            e.printStackTrace();
            return null;
        }
    }

// 辅助方法：创建Shipment对象
    private Shipment createShipment(WarehouseWorkRequest request) {
        Shipment shipment = new Shipment();
        shipment.setShipmentId(request.getShipmentId());
        shipment.setTrackingNumber(request.getTrackingNumber());
        shipment.setProductName(request.getProductName());
        shipment.setQuantity(request.getQuantity());
        shipment.setDestination(request.getDestination());
        shipment.setShippingMethod(request.getShippingMethod());
        shipment.setShipmentStatus(Shipment.STATUS_PENDING);
        shipment.setOrigin("Shanghai Warehouse");
        shipment.setCurrentLocation("Shanghai Warehouse");
        shipment.setShipDate(new Date());
        shipment.setEstimatedDeliveryDate(request.getEstimatedDeliveryDate());

        // 添加初始跟踪记录
        TrackingInfo trackingInfo = new TrackingInfo();
        trackingInfo.setShipmentId(shipment.getShipmentId());
        trackingInfo.setTimestamp(new Date());
        trackingInfo.setLocation("Shanghai Warehouse");
        trackingInfo.setStatus(Shipment.STATUS_PENDING);
        trackingInfo.setDescription("Order created, pending processing");
        trackingInfo.setLatitude(31.2304);
        trackingInfo.setLongitude(121.4737);
        shipment.addTrackingInfo(trackingInfo);

        return shipment;
    }
}
